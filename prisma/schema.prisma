// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String    @unique
//   password      String?
//   emailVerified DateTime?
//   image         String?
//   phone         String?
//   terms         Boolean   @default(false)
//   app           App[]
//   accounts      Account[]
// }

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @unique
  token      String
  expires    DateTime

  @@id([identifier])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  phone         String?
  terms         Boolean   @default(false)
  app           App[]
  accounts      Account[]
}

model App {
  id             String     @id @unique
  appName        String     @unique
  categories     Category[]
  textColor      String?     @default("#000")
  bgColor        String?     @default("#f5e3aeff")
  primaryColor   String?     @default("#48e")
  image          String?    @default("")
  isTitleVisible Boolean?   @default(false)
  User           User?      @relation(fields: [userId], references: [id])
  userId         String?
}

model Category {
  id            String        @id @default(cuid())
  categoryID    String        @default("")
  name          String
  categoryImage String?
  subcategories Subcategory[]
  products      Product[]
  App           App?          @relation(fields: [appId], references: [id])
  appId         String?
}

model Subcategory {
  id         String    @id @default(cuid())
  name       String?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model Product {
  id           String   @id @default(cuid())
  categoryId   String
  name         String
  productImage String?
  price        Float?
  isStock      Boolean  @default(true)
  description  String?
  Category     Category @relation(fields: [categoryId], references: [id])
}
